//Anthony Huang
//CSC 382
//Lab 3

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>

int insertion_sort (int A[ ], int n);	
void caculate_steps (int n);		

using namespace std;

int main()
{	
	cout<<"Input size" <<"\t\t" <<"Calculated Steps" "\t\t" "Real Steps" <<endl<<endl;

	for(int i = 100; i <= 4000; i = i + 500)
	{
		caculate_steps(i);			
		if(i==100)
		{
			i=0;
		}
	}

	return 0;
}

void caculate_steps (int n)
{
	srand((unsigned)time(0));	
									
	long int averagesteps, realsteps;
	
	averagesteps = ( (pow(long double(n),2)/4) + (3*long double(n)/4) );	
									
	int bound = 9999999;
	int total_steps = 0;
	int *values;

	values = new int [n];	

	for (int k=0; k<500; k++)
	{
		for (int i=0; i<n; i++)
		{
			values [i] = ( rand() % (bound + 1) ) ;	
		}

		int find = insertion_sort (values,n);

		total_steps+=find;					
	}	

	realsteps = total_steps/500;

	cout<<"["<<n<<"]"<<"\t\t\t"<<averagesteps<<"\t\t\t\t"<<realsteps<<endl;

	values = NULL;
	delete [] values;
};

int insertion_sort (int A[ ], int n)
								
{
	int i =0;
	int j =0;
	int temp =0;
	int count=0;


	A[0]=-5;	
	for (i=1; i<=n; i++)
	{
		j=i;
		while ( A[j] < A[j-1]) 
		{							 
			temp=A[j];
			A[j]=A[j-1];
			A[j-1]=temp;
			j--;
			count++;
		}
		count++;
	}
	return count;
};
